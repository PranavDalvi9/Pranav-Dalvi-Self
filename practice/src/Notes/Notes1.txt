Non-Primitive => Mutable =>  able to changed => object/ array/function

Primitive =>  InMutable => actual value is hold => string/ bolean / undefined/ numbers 



Redux 
Action.jsx
export const ADD_COUNT = "ADD_COUNT"

export const addCount = (payload) => ({
    type : ADD_COUNT,
    payload
})

Reducer
import { ADD_COUNT, ADD_TODO } from "./Action"

const initstate = {
    count: 11,
    todo: []
}

export const reducer = (store = initstate, { type, payload }) => {
    switch (type) {
        case ADD_COUNT:
            return { ...store, count: store.count + payload }
            
        default:
            return store
    }
}

Store.jsx
import {createStore} from "redux"

import { reducer } from "./Reducers"

export const store = createStore (
    reducer
)

onBlur


We can divide CSS selectors into five categories:

Simple selectors (select elements based on name, id, class)
p {
  text-align: center;
  color: red;
}

Combinator selectors (select elements based on a specific relationship between them)
div p {
  background-color: yellow;
}
div p {
  background-color: yellow;
}

Pseudo-class selectors (select elements based on a certain state)
/* unvisited link */
a:link {
  color: #FF0000;
}

/* visited link */
a:visited {
  color: #00FF00;
}

/* mouse over link */
a:hover {
  color: #FF00FF;
}

/* selected link */
a:active {
  color: #0000FF;
}

Pseudo-elements selectors (select and style a part of an element)
Attribute selectors (select elements based on an attribute or attribute value)